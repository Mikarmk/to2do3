// Desktop Application Manager
class DesktopManager {
    constructor() {
        this.modalOverlay = document.getElementById('modalOverlay');
        this.appModal = document.getElementById('appModal');
        this.folderModal = document.getElementById('folderModal');
        this.documentModal = document.getElementById('documentModal');
        this.modalTitle = document.getElementById('modalTitle');
        this.modalContent = document.getElementById('modalContent');
        
        this.init();
    }
    
    init() {
        this.bindEvents();
        this.setupKeyboardShortcuts();
    }
    
    bindEvents() {
        // Dock app clicks
        document.querySelectorAll('.dock-item.app').forEach(item => {
            item.addEventListener('click', (e) => {
                const appName = e.currentTarget.dataset.app;
                this.openApp(appName);
            });
        });
        
        // Folder clicks
        document.querySelectorAll('.desktop-item.folder').forEach(item => {
            item.addEventListener('click', () => {
                this.openFolder();
            });
        });
        
        // Document clicks inside folder - using event delegation
        this.modalOverlay.addEventListener('click', (e) => {
            const documentItem = e.target.closest('.folder-item.document-item');
            if (documentItem) {
                e.stopPropagation();
                const documentType = documentItem.dataset.document || 'hello';
                this.openDocument(documentType);
            }
        });
        
        // Close button events
        document.getElementById('closeBtn').addEventListener('click', () => {
            this.closeModal();
        });
        
        document.getElementById('folderCloseBtn').addEventListener('click', () => {
            this.closeModal();
        });
        
        document.getElementById('docCloseBtn').addEventListener('click', () => {
            this.closeModal();
        });
        
        // Modal overlay click to close
        this.modalOverlay.addEventListener('click', (e) => {
            if (e.target === this.modalOverlay) {
                this.closeModal();
            }
        });
        
        // Prevent modal content clicks from closing modal
        document.querySelectorAll('.modal').forEach(modal => {
            modal.addEventListener('click', (e) => {
                e.stopPropagation();
            });
        });
    }
    
    setupKeyboardShortcuts() {
        document.addEventListener('keydown', (e) => {
            // ESC to close modal
            if (e.key === 'Escape') {
                this.closeModal();
            }
            
            // Cmd/Ctrl + W to close modal (Mac-style)
            if ((e.metaKey || e.ctrlKey) && e.key === 'w') {
                e.preventDefault();
                this.closeModal();
            }
        });
    }
    
    openApp(appName) {
        // Set modal title based on app
        const appTitles = {
            'app1': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
            'app2': '–ü–æ—á—Ç–∞',
            'app3': '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è',
            'app4': '–†–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–¥–∞'
        };
        
        this.modalTitle.textContent = appTitles[appName] || '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ';
        
        // Set modal content based on app
        let content = '';
        
        switch(appName) {
            case 'app1':
                content = `
                    <div style="text-align: center; padding: 40px;">
                        <h2>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã</h2>
                        <div style="margin-top: 30px; padding: 20px; background: rgba(255, 0, 0, 0.1); border: 2px solid #ff4444; border-radius: 8px;">
                            <p style="color: #cc0000; font-weight: bold; font-size: 18px;">
                                ‚ö†Ô∏è –ù–ê–°–¢–†–û–ô–ö–ò –ú–ï–ù–Ø–¢–¨ –ù–ï–õ–¨–ó–Ø
                            </p>
                        </div>
                    </div>
                `;
                break;
                
            case 'app2':
                content = `
                    <div style="text-align: center; padding: 40px;">
                        <h2>–ü–æ—á—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç</h2>
                        <div style="margin-top: 30px; padding: 20px; background: rgba(128, 128, 128, 0.1); border: 2px solid #888; border-radius: 8px;">
                            <p style="color: #666; font-weight: bold; font-size: 18px;">
                                üìß –ü–ò–°–ï–ú –ù–ï–¢
                            </p>
                        </div>
                    </div>
                `;
                break;
                
            case 'app3':
                content = `
                    <div style="text-align: center; padding: 40px;">
                        <h2>–î–æ—Å—Ç—É–ø –∫ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏</h2>
                        <div style="margin-top: 30px; padding: 20px; background: rgba(255, 165, 0, 0.1); border: 2px solid #ff8800; border-radius: 8px;">
                            <p style="color: #cc6600; font-weight: bold; font-size: 18px;">
                                üß™ –î–õ–Ø –î–û–°–¢–£–ü–ê –ö –õ–ê–ë–û–†–ê–¢–û–†–ò–ò –ù–£–ñ–ù–û –ë–´–¢–¨ –•–ò–ú–ò–ö–û–ú
                            </p>
                        </div>
                    </div>
                `;
                break;
                
            case 'app4':
                content = `
                    <div style="padding: 20px;">
                        <h2 style="text-align: center; margin-bottom: 20px;">–†–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–¥–∞</h2>
                        <div style="background: #1e1e1e; color: #d4d4d4; padding: 20px; border-radius: 8px; font-family: 'Courier New', monospace; font-size: 14px; line-height: 1.5;">
                            <div style="color: #569cd6; margin-bottom: 10px;"># main.py</div>
                            <div style="color: #c586c0;">print</div><span style="color: #d4d4d4;">(</span><span style="color: #ce9178;">"–ü—Ä–∏–≤–µ—Ç –º–∏—Ä"</span><span style="color: #d4d4d4;">)</span>
                        </div>
                    </div>
                `;
                break;
                
            default:
                content = `
                    <div style="text-align: center; padding: 40px;">
                        <h2>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</h2>
                        <p style="margin-top: 16px; color: #666;">
                            –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                        </p>
                    </div>
                `;
        }
        
        this.modalContent.innerHTML = content;
        this.showModal(this.appModal);
    }
    
    openFolder() {
        this.showModal(this.folderModal);
        
        // Add event listener for document items in the folder
        setTimeout(() => {
            const documentItems = this.folderModal.querySelectorAll('.folder-item.document-item');
            documentItems.forEach(item => {
                item.addEventListener('click', (e) => {
                    e.stopPropagation();
                    const documentType = item.dataset.document || 'hello';
                    this.openDocument(documentType);
                });
            });
        }, 100);
    }
    
    openDocument(documentType = 'hello') {
        // Set document title and content based on type
        const docTitle = document.getElementById('documentModal').querySelector('.modal-title');
        const docContent = document.getElementById('documentModal').querySelector('.text-document');
        
        switch(documentType) {
            case 'forest-note':
                docTitle.textContent = '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –ª–µ—Å—É.txt';
                docContent.innerHTML = `
                    <div style="font-family: 'Courier New', monospace; line-height: 1.6; padding: 10px;">
                        <h3 style="color: #d32f2f; margin-bottom: 20px;">–û–¢–ß–ï–¢ –û –õ–ò–ö–í–ò–î–ê–¶–ò–ò INT-25</h3>
                        <p><strong>–î–∞—Ç–∞:</strong> 21 –∏—é–Ω—è 2024</p>
                        <p><strong>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:</strong> –ò–Ω–∂–µ–Ω–µ—Ä-—Ç–µ—Ö–Ω–∏–∫</p>
                        <p><strong>–°—Ç–∞—Ç—É—Å:</strong> –ó–ê–í–ï–†–®–ï–ù–û</p>
                        <hr style="margin: 20px 0; border: 1px solid #ccc;">
                        <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞:</strong></p>
                        <p>–†–æ–±–æ—Ç INT-25 –±—ã–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤ –ª–µ—Å–Ω–æ–º –º–∞—Å—Å–∏–≤–µ –≤ –Ω–µ—Ä–∞–±–æ—á–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏. –ü—Ä–∏—á–∏–Ω–∞ –ø–æ–ª–æ–º–∫–∏ - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ–π –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.</p>
                        <p><strong>–î–µ–π—Å—Ç–≤–∏—è –ø–æ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏:</strong></p>
                        <ul style="margin-left: 20px;">
                            <li>–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–∞–º—è—Ç–∏ —Ä–æ–±–æ—Ç–∞</li>
                            <li>–î–µ–º–æ–Ω—Ç–∞–∂ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤</li>
                            <li>–£—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</li>
                        </ul>
                        <p style="color: #d32f2f; font-weight: bold; margin-top: 20px;">
                            –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –í—Å–µ —Å–ª–µ–¥—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è INT-25 –≤ –ª–µ—Å—É —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã. –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Å—Ç–ª–∞—Å—å –ª–∏ –∑–∞–ø–∏—Å–∫–∞.
                        </p>
                        <p style="font-style: italic; color: #666; margin-top: 20px;">
                            –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –º–µ—Å—Ç–∞ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ...
                        </p>
                    </div>
                `;
                break;
            default:
                docTitle.textContent = '–ø—Ä–∏–≤–µ—Ç.txt';
                docContent.innerHTML = '<p>–ø—Ä–∏–≤–µ—Ç</p>';
        }
        
        this.showModal(this.documentModal);
    }
    
    showModal(modal) {
        // Hide all modals first
        document.querySelectorAll('.modal').forEach(m => {
            m.classList.remove('active');
        });
        
        // Show overlay and specific modal
        this.modalOverlay.classList.add('active');
        modal.classList.add('active');
        
        // Focus the modal for keyboard navigation
        modal.focus();
        
        // Add animation class
        modal.style.animation = 'modalAppear 0.3s ease-out';
    }
    
    closeModal() {
        // Add closing animation
        const activeModal = document.querySelector('.modal.active');
        if (activeModal) {
            activeModal.style.animation = 'modalDisappear 0.2s ease-in';
            
            setTimeout(() => {
                this.modalOverlay.classList.remove('active');
                document.querySelectorAll('.modal').forEach(modal => {
                    modal.classList.remove('active');
                    modal.style.animation = '';
                });
            }, 200);
        } else {
            this.modalOverlay.classList.remove('active');
        }
    }
    
    // Utility method to add new apps dynamically
    addApp(appData) {
        const dockContainer = document.querySelector('.dock-container');
        const newApp = document.createElement('div');
        newApp.className = 'dock-item app';
        newApp.dataset.app = appData.id;
        newApp.innerHTML = `<img src="${appData.icon}" alt="${appData.name}" class="dock-icon">`;
        
        newApp.addEventListener('click', () => {
            this.openApp(appData.id);
        });
        
        dockContainer.appendChild(newApp);
    }
    
    // Utility method to add new desktop items
    addDesktopItem(itemData) {
        const desktopIcons = document.querySelector('.desktop-icons');
        const newItem = document.createElement('div');
        newItem.className = `desktop-item ${itemData.type}`;
        newItem.style.top = itemData.position.top;
        newItem.style.left = itemData.position.left;
        
        newItem.innerHTML = `
            <div class="icon-container">
                <img src="${itemData.icon}" alt="${itemData.name}" class="icon">
            </div>
            <span class="icon-label">${itemData.name}</span>
        `;
        
        if (itemData.type === 'folder') {
            newItem.addEventListener('click', () => {
                this.openDocument();
            });
        }
        
        desktopIcons.appendChild(newItem);
    }
}

// Add closing animation keyframes
const style = document.createElement('style');
style.textContent = `
    @keyframes modalDisappear {
        from {
            opacity: 1;
            transform: scale(1) translateY(0);
        }
        to {
            opacity: 0;
            transform: scale(0.9) translateY(-20px);
        }
    }
`;
document.head.appendChild(style);

// Initialize the desktop when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    window.desktop = new DesktopManager();
});

// Export for potential future use
if (typeof module !== 'undefined' && module.exports) {
    module.exports = DesktopManager;
}