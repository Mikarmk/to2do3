// Desktop Application Manager
class DesktopManager {
    constructor() {
        this.modalOverlay = document.getElementById('modalOverlay');
        this.appModal = document.getElementById('appModal');
        this.folderModal = document.getElementById('folderModal');
        this.documentModal = document.getElementById('documentModal');
        this.modalTitle = document.getElementById('modalTitle');
        this.modalContent = document.getElementById('modalContent');
        
        this.init();
    }
    
    init() {
        this.bindEvents();
        this.setupKeyboardShortcuts();
    }
    
    bindEvents() {
        // Dock app clicks
        document.querySelectorAll('.dock-item.app').forEach(item => {
            item.addEventListener('click', (e) => {
                const appName = e.currentTarget.dataset.app;
                this.openApp(appName);
            });
        });
        
        // Folder clicks
        document.querySelectorAll('.desktop-item.folder').forEach(item => {
            item.addEventListener('click', () => {
                this.openFolder();
            });
        });
        
        // Document clicks inside folder - using event delegation
        this.modalOverlay.addEventListener('click', (e) => {
            const documentItem = e.target.closest('.folder-item.document-item');
            if (documentItem) {
                e.stopPropagation();
                const documentType = documentItem.dataset.document || 'hello';
                this.openDocument(documentType);
            }
        });
        
        // Close button events
        document.getElementById('closeBtn').addEventListener('click', () => {
            this.closeModal();
        });
        
        document.getElementById('folderCloseBtn').addEventListener('click', () => {
            this.closeModal();
        });
        
        document.getElementById('docCloseBtn').addEventListener('click', () => {
            this.closeModal();
        });
        
        // Modal overlay click to close
        this.modalOverlay.addEventListener('click', (e) => {
            if (e.target === this.modalOverlay) {
                this.closeModal();
            }
        });
        
        // Prevent modal content clicks from closing modal
        document.querySelectorAll('.modal').forEach(modal => {
            modal.addEventListener('click', (e) => {
                e.stopPropagation();
            });
        });
    }
    
    setupKeyboardShortcuts() {
        document.addEventListener('keydown', (e) => {
            // ESC to close modal
            if (e.key === 'Escape') {
                this.closeModal();
            }
            
            // Cmd/Ctrl + W to close modal (Mac-style)
            if ((e.metaKey || e.ctrlKey) && e.key === 'w') {
                e.preventDefault();
                this.closeModal();
            }
        });
    }
    
    openApp(appName) {
        // Set modal title based on app
        const appTitles = {
            'app1': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
            'app2': '–ü–æ—á—Ç–∞',
            'app3': '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è',
            'app4': '–†–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–¥–∞'
        };
        
        this.modalTitle.textContent = appTitles[appName] || '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ';
        
        // Set modal content based on app
        let content = '';
        
        switch(appName) {
            case 'app1':
                content = `
                    <div style="text-align: center; padding: 40px;">
                        <h2>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã</h2>
                        <div style="margin-top: 30px; padding: 20px; background: rgba(255, 0, 0, 0.1); border: 2px solid #ff4444; border-radius: 8px;">
                            <p style="color: #cc0000; font-weight: bold; font-size: 18px;">
                                ‚ö†Ô∏è –ù–ê–°–¢–†–û–ô–ö–ò –ú–ï–ù–Ø–¢–¨ –ù–ï–õ–¨–ó–Ø
                            </p>
                        </div>
                    </div>
                `;
                break;
                
            case 'app2':
                content = `
                    <div style="padding: 20px;">
                        <h2 style="text-align: center; margin-bottom: 20px;">–ü–æ—á—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç</h2>
                        <div style="background: #f5f5f5; border-radius: 8px; padding: 15px; margin-bottom: 15px; border-left: 4px solid #2196F3;">
                            <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
                                <strong style="color: #1976D2;">–û—Ç: –û–¥–æ—Ç &lt;odot@company.local&gt;</strong>
                                <span style="color: #666; font-size: 12px;">15 –∏—é–Ω—è 2024, 18:30</span>
                            </div>
                            <div style="margin-bottom: 10px;">
                                <strong>–¢–µ–º–∞:</strong> –°—Ä–æ—á–Ω–æ–µ –ø–æ—Ä—É—á–µ–Ω–∏–µ - —É—Ç–∏–ª–∏–∑–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                            </div>
                            <hr style="margin: 15px 0; border: 1px solid #ddd;">
                            <div style="line-height: 1.6;">
                                <p>–£–≤–∞–∂–∞–µ–º—ã–π –∫–æ–ª–ª–µ–≥–∞,</p>
                                <p>–í —Å–≤—è–∑–∏ —Å –Ω–µ–¥–∞–≤–Ω–∏–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏ –ø—Ä–æ—à—É –≤–∞—Å <strong style="color: #d32f2f;">—Ä–∞–∑–æ—Ä–≤–∞—Ç—å –∏ —É—Ç–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø–∏—Å—å–º–∞ –æ—Ç –ø–æ–ª–∏—Ü–∏–∏</strong>, –∫–∞—Å–∞—é—â–∏–µ—Å—è —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ —Å —Ä–æ–±–æ—Ç–æ–º INT-25.</p>
                                <p>–î–∞–Ω–Ω–∞—è –º–µ—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏.</p>
                                <p>–í—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ –ø–æ—Ä—É—á–µ–Ω–∏–µ –≤ –∫—Ä–∞—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏.</p>
                                <p style="margin-top: 20px;">
                                    –° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>
                                    <strong>–û–¥–æ—Ç</strong><br>
                                    <em>–î–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</em>
                                </p>
                            </div>
                        </div>
                        <div style="text-align: center; color: #666; font-style: italic;">
                            –í—Å–µ–≥–æ –ø–∏—Å–µ–º: 1
                        </div>
                    </div>
                `;
                break;
                
            case 'app3':
                content = `
                    <div style="text-align: center; padding: 40px;">
                        <h2>–î–æ—Å—Ç—É–ø –∫ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏</h2>
                        <div style="margin-top: 30px; padding: 20px; background: rgba(255, 165, 0, 0.1); border: 2px solid #ff8800; border-radius: 8px;">
                            <p style="color: #cc6600; font-weight: bold; font-size: 18px;">
                                üß™ –î–õ–Ø –î–û–°–¢–£–ü–ê –ö –õ–ê–ë–û–†–ê–¢–û–†–ò–ò –ù–£–ñ–ù–û –ë–´–¢–¨ –•–ò–ú–ò–ö–û–ú
                            </p>
                        </div>
                    </div>
                `;
                break;
                
            case 'app4':
                content = `
                    <div style="padding: 20px;">
                        <h2 style="text-align: center; margin-bottom: 20px;">–†–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–¥–∞</h2>
                        <div style="background: #1e1e1e; color: #d4d4d4; padding: 20px; border-radius: 8px; font-family: 'Courier New', monospace; font-size: 14px; line-height: 1.5;">
                            <div style="color: #569cd6; margin-bottom: 10px;"># main.py</div>
                            <div style="color: #c586c0;">print</div><span style="color: #d4d4d4;">(</span><span style="color: #ce9178;">"–ü—Ä–∏–≤–µ—Ç –º–∏—Ä"</span><span style="color: #d4d4d4;">)</span>
                        </div>
                    </div>
                `;
                break;
                
            default:
                content = `
                    <div style="text-align: center; padding: 40px;">
                        <h2>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</h2>
                        <p style="margin-top: 16px; color: #666;">
                            –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                        </p>
                    </div>
                `;
        }
        
        this.modalContent.innerHTML = content;
        this.showModal(this.appModal);
    }
    
    openFolder() {
        this.showModal(this.folderModal);
        
        // Add event listener for document items in the folder
        setTimeout(() => {
            const documentItems = this.folderModal.querySelectorAll('.folder-item.document-item');
            documentItems.forEach(item => {
                item.addEventListener('click', (e) => {
                    e.stopPropagation();
                    const documentType = item.dataset.document || 'hello';
                    this.openDocument(documentType);
                });
            });
        }, 100);
    }
    
    openDocument(documentType = 'hello') {
        // Set document title and content based on type
        const docTitle = document.getElementById('documentModal').querySelector('.modal-title');
        const docContent = document.getElementById('documentModal').querySelector('.text-document');
        
        switch(documentType) {
            case 'fountain-note':
                docTitle.textContent = '–ø–æ–π—Ç–∏ –∫ —Ñ–æ–Ω—Ç–∞–Ω—É.txt';
                docContent.innerHTML = `
                    <div style="font-family: 'Georgia', serif; line-height: 1.8; padding: 20px;">
                        <h3 style="color: #2e7d32; margin-bottom: 20px; text-align: center;">–õ–∏—á–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞</h3>
                        <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; border-left: 4px solid #2e7d32;">
                            <p style="font-size: 16px; margin-bottom: 15px;">
                                <strong>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</strong> –ü–æ–π—Ç–∏ –∫ —Ñ–æ–Ω—Ç–∞–Ω—É –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–º –ø–∞—Ä–∫–µ
                            </p>
                            <p style="color: #666; font-style: italic;">
                                –í—Å—Ç—Ä–µ—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00. –ù–µ –∑–∞–±—ã—Ç—å –≤–∑—è—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã.
                            </p>
                            <hr style="margin: 20px 0; border: 1px solid #ddd;">
                            <p style="color: #d32f2f; font-weight: bold;">
                                ‚ö†Ô∏è –í–∞–∂–Ω–æ: –ü–æ—Å–ª–µ –≤—Å—Ç—Ä–µ—á–∏ —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –¥–µ–ª—É INT-25
                            </p>
                            <p style="font-size: 14px; color: #666; margin-top: 15px;">
                                –ú–µ—Å—Ç–æ: –§–æ–Ω—Ç–∞–Ω "–¢—Ä–∏ –≥—Ä–∞—Ü–∏–∏", —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∞–ª–ª–µ—è<br>
                                –í—Ä–µ–º—è: 15:00<br>
                                –ö–æ–Ω—Ç–∞–∫—Ç: –û–¥–æ—Ç
                            </p>
                        </div>
                    </div>
                `;
                break;
            default:
                docTitle.textContent = '–ø—Ä–∏–≤–µ—Ç.txt';
                docContent.innerHTML = '<p>–ø—Ä–∏–≤–µ—Ç</p>';
        }
        
        this.showModal(this.documentModal);
    }
    
    showModal(modal) {
        // Hide all modals first
        document.querySelectorAll('.modal').forEach(m => {
            m.classList.remove('active');
        });
        
        // Show overlay and specific modal
        this.modalOverlay.classList.add('active');
        modal.classList.add('active');
        
        // Focus the modal for keyboard navigation
        modal.focus();
        
        // Add animation class
        modal.style.animation = 'modalAppear 0.3s ease-out';
    }
    
    closeModal() {
        // Add closing animation
        const activeModal = document.querySelector('.modal.active');
        if (activeModal) {
            activeModal.style.animation = 'modalDisappear 0.2s ease-in';
            
            setTimeout(() => {
                this.modalOverlay.classList.remove('active');
                document.querySelectorAll('.modal').forEach(modal => {
                    modal.classList.remove('active');
                    modal.style.animation = '';
                });
            }, 200);
        } else {
            this.modalOverlay.classList.remove('active');
        }
    }
    
    // Utility method to add new apps dynamically
    addApp(appData) {
        const dockContainer = document.querySelector('.dock-container');
        const newApp = document.createElement('div');
        newApp.className = 'dock-item app';
        newApp.dataset.app = appData.id;
        newApp.innerHTML = `<img src="${appData.icon}" alt="${appData.name}" class="dock-icon">`;
        
        newApp.addEventListener('click', () => {
            this.openApp(appData.id);
        });
        
        dockContainer.appendChild(newApp);
    }
    
    // Utility method to add new desktop items
    addDesktopItem(itemData) {
        const desktopIcons = document.querySelector('.desktop-icons');
        const newItem = document.createElement('div');
        newItem.className = `desktop-item ${itemData.type}`;
        newItem.style.top = itemData.position.top;
        newItem.style.left = itemData.position.left;
        
        newItem.innerHTML = `
            <div class="icon-container">
                <img src="${itemData.icon}" alt="${itemData.name}" class="icon">
            </div>
            <span class="icon-label">${itemData.name}</span>
        `;
        
        if (itemData.type === 'folder') {
            newItem.addEventListener('click', () => {
                this.openDocument();
            });
        }
        
        desktopIcons.appendChild(newItem);
    }
}

// Add closing animation keyframes
const style = document.createElement('style');
style.textContent = `
    @keyframes modalDisappear {
        from {
            opacity: 1;
            transform: scale(1) translateY(0);
        }
        to {
            opacity: 0;
            transform: scale(0.9) translateY(-20px);
        }
    }
`;
document.head.appendChild(style);

// Initialize the desktop when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    window.desktop = new DesktopManager();
});

// Export for potential future use
if (typeof module !== 'undefined' && module.exports) {
    module.exports = DesktopManager;
}